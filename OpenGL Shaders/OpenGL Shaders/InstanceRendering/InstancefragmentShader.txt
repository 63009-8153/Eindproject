#version 400 core

in vec3 pass_ShineReflectAmbient; 

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[4];
in vec3 toCameraVector;
in float visibility;
in mat4 transformationM;

out vec4 out_Color;

uniform sampler2D textureSampler0;

uniform vec3 lightColour[4];
uniform vec3 attenuation[4];
uniform vec3 skyColour;

const float levels = 3.0;
const float useCelShading = 0;

void main(void){

	float level;

	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitVectorToCamera = normalize(toCameraVector);

	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);

	for(int i = 0; i < 4; i++){
		float distance = length(toLightVector[i]);
		float attFactor = attenuation[i].x + (attenuation[i].y * distance) + (attenuation[i].z * (distance * distance));

		vec3 unitLightVector = normalize(toLightVector[i]);

		float nDot1 = dot(unitNormal, unitLightVector);
		float brightness = max(nDot1, 0.0);

		if(useCelShading > 0){
			level = floor(brightness * levels);
			brightness = level / levels;
		}
		
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, pass_ShineReflectAmbient.x);

		if(useCelShading > 0){
			level = floor(dampedFactor * levels);
			dampedFactor = level / levels;
		}

		totalDiffuse = totalDiffuse + ((brightness * lightColour[i]) / attFactor);
		totalSpecular = totalSpecular + ((dampedFactor * pass_ShineReflectAmbient.y * lightColour[i]) / attFactor);
	}
	
	totalDiffuse = max(totalDiffuse, pass_ShineReflectAmbient.z);

	vec4 textureColour = texture(textureSampler0, pass_textureCoords);
	if(textureColour.a < 0.7){
		discard;
	}

	out_Color = vec4(totalDiffuse, 1.0) * textureColour;
	if(pass_ShineReflectAmbient.x >= 0 && pass_ShineReflectAmbient.y >= 0) out_Color += vec4(totalSpecular, 1.0);

	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);
	out_Color = vec4(unitNormal, 1.0);
	//out_Color = vec4(transformationM[0][0], transformationM[0][1], transformationM[0][2], 1.0);
}
#version 400 core

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

in mat4 transformationMatrix;
in vec3 ShineReflectAmbient;
in vec2 offset;

//in float shineDamper;
//in float reflectivity;
//in float ambientLight;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector[4];
out vec3 toCameraVector;
out float visibility;
out vec3 pass_tangent;
out mat4 transformationM;

out vec3 pass_ShineReflectAmbient;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;

uniform float useFakeLighting;

uniform vec3 lightPosition[4];

uniform float numberOfRows;

const float density = 0.0005;
const float gradient = 4.5;

void main(void){
	transformationM = transformationMatrix;
	pass_ShineReflectAmbient = ShineReflectAmbient;

	//vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	vec4 worldPosition = vec4(position.x + (gl_InstanceID * 10), position.yz, 1.0);
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * positionRelativeToCam;
	pass_textureCoords = (textureCoords / numberOfRows) + offset;

	vec3 originalNormal = normal;
	if(useFakeLighting > 0.5) originalNormal = vec3(0.0, 1.0, 0.0);

	surfaceNormal = (transformationMatrix * vec4(originalNormal, 0.0f)).xyz;
	for(int i = 0; i < 4; i++){
		toLightVector[i] = lightPosition[i] - worldPosition.xyz;
	}
	toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;

	float distance = length(positionRelativeToCam.xyz);
	visibility = exp(-pow((distance * density), gradient));
	visibility = clamp(visibility, 0.0, 1.0);
}